from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import CommandStart, StateFilter, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config_data.config import Config, load_config
import database.requests as rq
import keyboards.keyboard_user as kb
from filter.filter import validate_russian_phone_number

import logging
import asyncio
import random

router = Router()
config: Config = load_config()


class User(StatesGroup):
    name = State()
    phone = State()
    request_user = State()
    content_state  = State()


@router.message(CommandStart())
async def process_start_command(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ - –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å" –∏–ª–∏ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ "/start"
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f"process_start_command {message.chat.id}")
    await state.set_state(state=None)
    if message.from_user.username == None:
        username = 'None'
    else:
        username = message.from_user.username
    await rq.add_user(tg_id=message.chat.id,
                      data={"tg_id": message.chat.id, "username": username})
    await message.answer(text=f'ü§ñ –î–æ–±—Ä—ã–π –¥–µ–Ω—å, –º—ã —Ä–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å.\n'
                              f'–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å –∏–ª–∏ –∫—É–ø–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å?',
                         reply_markup=kb.keyboard_action())


@router.callback_query(F.data.startswith('action'))
async def process_registration(callback: CallbackQuery, state: FSMContext):
    """
    –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    :param callback:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f"process_registration {callback.message.chat.id}")
    answer = callback.data.split('_')[1]
    await state.update_data(action=answer)
    if answer == 'sell':
        await callback.message.edit_text(text="ü§ñ –•–æ—Ä–æ—à–æ, —Å–µ–π—á–∞—Å –æ—Ü–µ–Ω–∏–º, –∞ –ø–æ–∫–∞ –¥–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è.\n"
                                              "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
                                         reply_markup=None)
        await state.set_state(User.name)
    elif answer == "bay":
        await callback.message.edit_text(text="ü§ñ –•–æ—Ä–æ—à–æ. –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è.\n"
                                              "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
                                         reply_markup=None)
        await state.set_state(User.name)
    await callback.answer()


@router.message(F.text, StateFilter(User.name))
async def get_name(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –ü–æ–ª—É—á–∞–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º—è
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'get_name {message.chat.id}')
    await state.update_data(name=message.text)
    await message.answer(text='–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –≤–Ω–∏–∑—É üëá\n'
                              '"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç ‚òéÔ∏è"',
                         reply_markup=kb.keyboards_get_contact())
    await state.set_state(User.phone)


@router.message(StateFilter(User.phone))
async def get_phone_user(message: Message, state: FSMContext) -> None:
    """
    –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏ –∑–∞–Ω–æ—Å–∏–º –µ–≥–æ –≤ –ë–î
    :param message:
    :param state:
    :return:
    """
    logging.info(f'get_phone_user: {message.chat.id}')
    # –µ—Å–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—Å—è"
    if message.contact:
        phone = str(message.contact.phone_number)
    # –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    else:
        phone = message.text
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –Ω–µ –≤–∞–ª–∏–¥–µ–Ω –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ
        if not validate_russian_phone_number(phone):
            await message.answer(text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
            return
    # –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.update_data(phone=phone)
    data = await state.get_data()
    action = data['action']
    if action == 'bay':
        await message.answer(text=f'ü§ñ –û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, {data["name"]}. '
                                  f'–û–ø–∏—à–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è - –º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å, –±—é–¥–∂–µ—Ç.',
                             reply_markup=ReplyKeyboardRemove())
    elif action == 'sell':
        await message.answer(text=f'ü§ñ –û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, {data["name"]}. '
                                  f'–ö–∞–∫–æ–π —É –≤–∞—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—å? –ú–∞—Ä–∫–∞, –≥–æ–¥, –ø—Ä–æ–±–µ–≥, –ø–æ–∂–µ–ª–∞–Ω–∏–µ –ø–æ —Ü–µ–Ω–µ',
                             reply_markup=ReplyKeyboardRemove())
    await state.set_state(User.request_user)


@router.message(F.text, StateFilter(User.request_user))
async def get_request_user(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'get_request_user {message.chat.id}')
    await message.answer(text='üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ), –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.')
    await state.set_state(User.content_state)
    await state.update_data(content=[])
    await state.update_data(count=[])
    await state.update_data(request_user=message.text)


@router.message(StateFilter(User.content_state), or_f(F.document, F.photo, F.video))
async def request_content_photo_text(message: Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    :param message:
    :param state:
    :return:
    """
    logging.info(f'request_content_photo_text {message.chat.id}')
    await asyncio.sleep(random.random())
    data = await state.get_data()
    list_content = data.get('content', [])
    count = data.get('count', [])
    if message.text:
        await message.answer(text=f'üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ), –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.')
        return
    elif message.photo:
        content = message.photo[-1].file_id
        if message.caption:
            caption = message.caption
        else:
            caption = 'None'
        await state.update_data(caption=caption)

    elif message.video:
        content = message.video.file_id
        if message.caption:
            caption = message.caption
        else:
            caption = 'None'
        await state.update_data(caption=caption)

    elif message.document:
        content = message.document.file_id
        if message.caption:
            caption = message.caption
        else:
            caption = 'None'
        await state.update_data(caption=caption)

    list_content.append(content)
    count.append(content)
    await state.update_data(content=list_content)
    await state.update_data(count=count)
    await state.set_state(state=None)
    if len(count) == 1:
        await message.answer(text='–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –º–∞—Ç–µ—Ä–∏–∞–ª –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?',
                             reply_markup=kb.keyboard_send())


@router.callback_query(F.data.endswith('content'))
async def send_add_content(callback: CallbackQuery, state: FSMContext, bot: Bot):
    logging.info(f'send_add_content {callback.message.chat.id}')
    answer = callback.data.split('_')[0]
    if answer == 'add':
        await state.set_state(User.content_state)
        await state.update_data(count=[])
        await callback.message.edit_text(text='üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ), –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.')
    else:
        await callback.message.edit_text(text='–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç –≤–∞—Å –ø–µ—Ä–µ–¥–∞–Ω—ã\n\n'
                                              '–°–ø–∞—Å–∏–±–æ! –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è',
                                         reply_markup=None)

        data = await state.get_data()
        request_user = data['request_user']
        content = data['content']
        action = data['action']
        first_text = ''
        if action == 'sell':
            await callback.message.edit_text(text=f'ü§ñ –ë–ª–∞–≥–æ–¥–∞—Ä—é, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∏ –æ–∑–≤—É—á–∏—Ç —Å—É–º–º—É,'
                                                  f' –∑–∞ –∫–æ—Ç–æ—Ä—É—é –º—ã –≥–æ—Ç–æ–≤—ã –∫—É–ø–∏—Ç—å –≤–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å, –∞ –ø–æ–∫–∞ –≤—Å—Ç—É–ø–∞–π—Ç–µ –≤ –Ω–∞—à –∫–∞–Ω–∞–ª,'
                                                  f' —á—Ç–æ–±—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –ø–æ–±–ª–∏–∂–µ\n\n'
                                                  f'https://t.me/kirianov_al',
                                             reply_markup=None)
            first_text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} –æ—Å—Ç–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è'
        elif action == 'bay':
            await callback.message.edit_text(text=f'ü§ñ –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ, –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è,'
                                                  f' –∞ –ø–æ–∫–∞ –≤—Å—Ç—É–ø–∞–π—Ç–µ –≤ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –ø–æ–±–ª–∏–∂–µ\n\n'
                                                  f'https://t.me/kirianov_al',
                                             reply_markup=None)
            first_text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} –æ—Å—Ç–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è'
        for admin in config.tg_bot.admin_ids.split(','):
            try:
                for item in content:
                    try:
                        await bot.send_photo(chat_id=admin,
                                             photo=item)
                    except:
                        try:
                            await bot.send_video(chat_id=admin,
                                                 video=item)
                        except:
                            await bot.send_document(chat_id=admin,
                                                    document=item)
            except:
                await bot.send_message(chat_id=admin,
                                       text='–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç')
            try:
                await bot.send_message(chat_id=admin,
                                       text=f'<b>{first_text}:</b>\n\n'
                                            f'<b>–ò–º—è:</b> {data["name"]}\n'
                                            f'<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data["phone"]}\n'
                                            f'<b>–ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {request_user}\n')

            except:
                pass
        await state.set_state(state=None)
